#include <algorithm>
#include <string>
#include <vector>
#include <cmath>
#include <map>
#include <fstream>
#include <cassert>
#include <set>
#include <queue>
#include <iostream>
#include <utility>
#include <stack>
#include <complex>
#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include <list>
#include <functional>
#include <cctype>
//#include <unordered_set>
//#include <unordered_map>
using namespace std;
typedef long double ld;
typedef long long ll;
typedef pair<int,int> ppi;
typedef pair<ll,ll> ppl;
typedef pair<double,double> ppd;
#define PB push_back
#define MP make_pair
#define FIR first
#define SEC second
#define FOR(a,b,c) for(int a=(b);a<(c);++a)
#define FR(a,b) for(typeof(b.begin()) a=b.begin();a!=b.end();++a)
class DrivingPlans
{
public:
  int count(int N, vector <int> A, vector <int> B, vector <int> C);
};
const int N = 2007;
const int mod = 1e9 + 9;
int fa[N];
int que( int v )
{
  return v == fa[v] ? v : fa[v] = que( fa[v] );
}
void join( int a, int b )
{
  a = que(a);
  b = que(b);
  fa[b] = a;
}
vector<ppi> rd[N];
int ct[N];
void add( int f, int t , int c )
{
  rd[f].push_back( make_pair( t, c ) );
  rd[t].push_back( make_pair( f, c ) );
}
const int inf = 2e9 + 7;
int dis[N];
int dist[N];
int cnt[N];
bool in[N];
void cal( int from, int n )
{
  for( int i = 1 ; i <= n; ++i )
    dis[i] = inf;
  dis[from] = 0;
  in[from] = true;
  queue<int> que;
  que.push(from);
  for( ; !que.empty(); )
    {
      int v = que.front();
      que.pop();
      in[v] = false;
      int d = dis[v];
      for( auto i : rd[v] )
	{
	  int t = i.first;
	  int tmp = d + i.second;
	  if( dis[t] > tmp )
	    {
	      dis[t] = tmp;
	      if( !in[t] )
		{
		  que.push(t);
		  in[t] = true;
		}
	    }
	}
    }
}
int DrivingPlans::count(int n, vector <int> a, vector <int> b, vector <int> c)
{
  int num = a.size();
  for( int i = 1 ; i <= n; ++i )
    fa[i] = i;
  for( int i = 0 ; i < num; ++i )
    if( c[i] > 0 )
      {
	add( a[i], b[i], c[i]);
      }
    else join( a[i], b[i] );
  if( que( 1 ) == que( n ) )
    return -1;
  cal( n, n );
  memcpy( dist, dis, sizeof(dist) );
  cal( 1, n);
  for( int i = 1; i <= n; ++i )
    ++ct[ que(i) ];
  multimap<int,int> mapp;
  for( int i = 1; i <= n; ++i )
    if( dis[i] + dist[i] == dis[n] )
      {
	if( ct[ que(i) ] > 1 )
	  return -1;
	mapp.insert( make_pair( dis[i], i ) );
      }
  cnt[1] = 1;
  for( auto i : mapp )
    {
      int v = i.second;
      for( auto j : rd[v] )
	{
	  int t = j.first;
	  if( dis[t] == dis[v] + j.second &&
	      dis[t] + dist[t] == dis[n])
	    {
	      cnt[t] = ( cnt[t] + cnt[v] ) % mod;
	    }
	}
    }
  return cnt[n];
}
int main()
{
  return 0;
}
