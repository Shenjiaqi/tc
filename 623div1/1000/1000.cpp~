#include <algorithm>
#include <string>
#include <vector>
#include <cmath>
#include <map>
#include <fstream>
#include <cassert>
#include <set>
#include <queue>
#include <iostream>
#include <utility>
#include <stack>
#include <complex>
#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include <list>
#include <functional>
#include <cctype>
//#include <unordered_set>
//#include <unordered_map>
using namespace std;
typedef long double ld;
typedef long long ll;
typedef pair<int,int> ppi;
typedef pair<ll,ll> ppl;
typedef pair<double,double> ppd;
#define PB push_back
#define MP make_pair
#define FIR first
#define SEC second
#define FOR(a,b,c) for(int a=(b);a<(c);++a)
#define FR(a,b) for(typeof(b.begin()) a=b.begin();a!=b.end();++a)

class AliceAndFriends
{
public:
  double getMoney(vector <int> cards);
};
const int N = 1007;
int nxt[N], pre[N];
int cal( int v, int add, int lim )
{
  if( v == lim )
    return 0;
  if( v < lim )
    {
      if( v + add < lim )
	return -4;
      return -2;
    }
  // v > lim
  if( lim * 2 < v - add)
    return 4;
  if( lim * 2 >= v - add && lim * 2 < v + add)
    return 3;
  if( lim * 2 == v + add )
    return 1;
  return 0;
}
double AliceAndFriends::getMoney(vector <int> cards)
{
  int n = cards.size();
  sort( cards.begin(), cards.end() );
  pre[0] = -1;
  for( int i = 1 ; i < n; ++i )
    {
      if( cards[i] == cards[i - 1] )
	pre[i] = pre[i - 1];
      else pre[i] = i - 1;
    }
  nxt[n - 1] = n;
  for( int i = n - 2; i >= 0; --i )
    nxt[i] = ( cards[i] == cards[i + 1] ) ? nxt[i + 1] : i + 1;
  int sum(0);
  for( int i = 0 ; i < n ; ++i )
    {
      int cnt(0);
      for( int j = 0; j < n; ++j )
	if( i != j )
	  cnt += cal( cards[i], 0, cards[j] );
      int c[3];
      for( c[0] = i - 1; c[0] >= 0 && cards[ c[0] ] * 2 > cards[i];
	   c[0] = pre[ c[0] ] )
	;
      for( c[1] = i - 1; c[1] >= 0 && cards[ c[1] ] >= cards[i];
	   c[1] = pre[ c[1] ] )
	;
      for( c[2] = i + 1; c[2] < n && cards[ c[2] ] == cards[ c[2] ];
	   c[2] = nxt[ c[2] ] )
	;
      int mxCnt = cnt;
      for( int d = 0; ; )
	{
	  int det = cards[i] - d;
	  if( c[0] >= 0 && pre[ c[0] ] >= 0 )
	    det = min( det, cards[ pre[ c[0] ] ] - cards[ c[0] ] );
	  if( c[1] >= 0 && pre[ c[1] ] >= 0 )
	    det = min( det, cards[ pre[ c[1] ] ] - cards[ c[1] ] );
	  if( c[2] < n && nxt[ c[2] ] < n )
	    det = min( det, cards[ nxt[ c[2] ] ] - cards[ c[2] ] );
	  if( det == 0 )
	    break;
	  for( ; c[0] >= 0 && cards[ c[0] ] * 2 >= cards[ c[0] ]; --c[0] )
	    {
	      cnt += ( cal( cards[i], d + det, cards[ c[0] ] ) -
		       cal( cards[i], d, cards[ c[0] ] ) );
	    }
	  for( ; c[1] >= 0 && cards[ c[1] ] >= cards[ c[0] ]; --c[1] )
	    {
	      cnt += ( cal( cards[i], d + det, cards[ c[1] ] ) - 
		       cal( cards[i], d, cards[ c[0] ] ) );
	    }
	  for( ; c[2] < n && cards[ c[2] ] <= cards[ c[2] ]; ++c[2] )
	    {
	      cnt += ( cal( cards[i], d + det, cards[ c[2] ] ) -
		       cal( cards[i], d, cards[ c[2] ] ) );
	    }
	  mxCnt = max( mxCnt, cnt);
	  d += det;
	}
      sum += mxCnt;
    }
  return (double)sum / ( n * 4 );
}
int main()
{
  AliceAndFriends a;
  // int c[] = { 1000000000, 1000000000 };
  int c[] = {42, 468, 335, 501, 170, 725, 479, 359, 963, 465, 706, 146, 282, 828, 962, 492, 996, 943, 828, 437, 392, 605, 903, 154, 293, 383, 422, 717, 719, 896, 448, 727, 772, 539, 870, 913, 668, 300, 36, 895, 704, 812, 323, 334, 674, 665, 142, 712, 254, 869};
  vector<int> cc;
  for( int i = 0 ; i < sizeof(c) / sizeof(c[0]); ++i )
    cc.push_back( c[i] );
  // cout << cc.size() << endl;
  cout << a.getMoney(cc) << endl;
  return 0;
}
