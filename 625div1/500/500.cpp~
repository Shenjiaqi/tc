#include <algorithm>
#include <string>
#include <vector>
#include <cmath>
#include <map>
#include <fstream>
#include <cassert>
#include <set>
#include <queue>
#include <iostream>
#include <utility>
#include <stack>
#include <complex>
#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include <list>
#include <functional>
#include <cctype>
//#include <unordered_set>
//#include <unordered_map>
using namespace std;
typedef long double ld;
typedef long long ll;
typedef pair<int,int> ppi;
typedef pair<ll,ll> ppl;
typedef pair<double,double> ppd;
#define PB push_back
#define MP make_pair
#define FIR first
#define SEC second
#define FOR(a,b,c) for(int a=(b);a<(c);++a)
#define FR(a,b) for(typeof(b.begin()) a=b.begin();a!=b.end();++a)
class BlockTheBlockPuzzle
{
  int minimumHoles(vector <string> board);
};
const int dir[4][2] = { { -1, 0 } , { 1, 0 }, { 0, 1 }, { 0, -1 } };
const int N = 52;
const int M = N * N + N;
int p[N][N], pi;
int s[M * 2];
int c[ M * 2];
int rd[ M * 30 ][3], rdi;
bool vis[ M * 2 ];
void add( int f, int t )
{
  ++rdi;
  rd[rdi][0] = t, rd[rdi][1] = 1, rd[rdi][2] = s[f], s[f] = rdi;
  ++rdi;
  rd[rdi][0] = f, rd[rdi][1] = 1, rd[rdi][2] = s[t], s[t] = rdi;
}
bool bfs()
{
  memcpy( c, s, sizeof(c) );
  queue<int> que;
  que.push(S);
  in[S] = true;
  for( ; ; )
    {
      int v = que.front();
      que.pop();
      for( int i = c[v]; i; i = rd[i][2] )
	{

	}
    }
}
int mf( )
{
  int r(0);
  for( ; bfs() ; )
    {
      for( ; ; )
	{
	  int tmp = dfs( S, M);
	  if( tmp == 0 )
	    break;
	  r += tmp;
	}
    }
  return r;
}
int BlockTheBlockPuzzle::minimumHoles(vector <string> board)
{
  int n = board.size();
  ++pi;
  S = pi;
  ++pi;
  T = pi;
  for( int i = 0 ; i < n ; ++i )
    for( int j = 0 ; j < n ; ++j )
      {
	if( board[i][j] == '$' )
	  {
	    for( int a = 0 ; a < n ; ++a )
	      if( ( abs( a - i ) & 1 ) == 0 )
		for( int b = 0 ; b < n ; ++b )
		  if( ( abs( b - j ) & 1 ) == 0 )
		    {
		      if( board[a][b] != 'H' )
			{
			  p[a][b] = ++pi;
			  add( p[a][b], p[a][b] + M );
			  if( board[a][b] == '$' )
			    add( S, p[a][b] + M );
			  else if( board[a][b] == 'b' )
			    add( p[a][b], T );
			  for( int c = 0; c < sizeof( dir ) / sizeof( dir[0] );
			       ++c )
			    {
			      int x = a + dir[c][0];
			      int y = b + dir[c][1];
			      if( x >= 0 && y >= 0 && x < n && y < n &&
				  board[x][y] != 'H' )
				{
				  add( p[a][b], p[x][y] + M);
				  add( p[x][y], p[a][b] + M);
				}
			    }
			}
		    }
	    return mf();
	  }
      }
  return 0;
}
int main()
{
  
  return 0;
}
